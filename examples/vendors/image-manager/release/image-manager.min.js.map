{"version":3,"sources":["image-manager.min.js"],"names":["root","factory","define","amd","ImageManager","module","exports","this","_","ImageCache","ImageHelper","ImageCancellableLoader","_initIFrame","scope","iframe","document","createElement","setAttribute","style","setProperty","onload","image","contentDocument","contentWindow","body","appendChild","source","src","isLoading","onLoad","bind","onerror","onFailure","destructor","cancelRequest","removeChild","currentWindow","stop","execCommand","load","onSuccess","onError","tempImage","complete","Image","ImageLoader","options","defaults","_initialize","id","getInPath","_cfgDebug","console","warn","length","fullRepeal","onResolve","maxDownloads","toNumber","isPaused","currentDownloads","completed","isLoadingStarted","dispatchLoading","isCached","info","initImage","onFailed","getImageinfo","dir","call","onComplete","onDrop","waitForDocumentLoad","cache","configReset","_cache","readyState","_isActive","_checkOut","addEventListener","imageListCurrSize","_currentActiveDerived","_maxActiveDerived","keys","_listOfImages","every","imageId","_id","_onAllDone","onFinish","_onListSizeChange","oldListSize","listSize","newSize","currSize","splice","forEach","_imageGetFirst","_onDownloadSizeChange","newActiveDownloadsSize","_hasId","_removeImageFromList","srcUrl","imageLoader","_srcList","_startById","isArray","value","arguments","MAX_NUMBER","_listSize","_configDefault","_config","configGet","extend","Object","defineProperty","get","set","newActiveSize","cleanSize","currentSize","size","toDebug","map","limit","hasSource","loadImage","isString","currListSize","isObject","img","configSet","configName","configValue","name","setable","varFilter","type","min","isFunction","includes","pauseBySrc","startBySrc","pauseAll","startAll","cacheAdd","add","cacheGet","cacheRemove","remove","cacheList","cacheClear","destroy","Number","MAX_VALUE","func","args","context","apply","argsLength","collection1","collection2","newObject","index","property","hasOwnProperty","collection","Array","indexOf","prop","list","prototype","toString","variable","varType","iteratee","returnContext","object","propertyName","has","part","hasType","propertyType","varTypeIn","sort","result","push","listType","filter","undefined","times","iterator","accum","Math","max","toArray","startIndex","onFailedConversion","minValue","maxValue","parseFloat","isFinite","isNaN","toFixed","allowedTypes","defaltValue","slice","toLowerCase","types","CacheLRU","HTMLImageElement","element","timestamp","Date","now","put","width","height","isURL","start","substr","fileSize","callback","xhr","XMLHttpRequest","open","onreadystatechange","status","getResponseHeader","send","isInDOM","parentNode"],"mappings":"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","file":"image-manager.min.js","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(\"image-manager\", [\"cachelru\"], function () {\n      return (root.ImageManager = factory());\n    });\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = (root.ImageManager = factory());\n  } else {\n    root.ImageManager = factory();\n  }\n}(this, function () {\n  'use strict';\n\n\n\n/**\n * Utility class\n * @class _\n */\nfunction _() {\n}\n/**\n * Maximum numeric value representable\n * @type {number}\n * @static\n * @public\n */\n_.MAX_NUMBER = Number.MAX_VALUE;\n/**\n * Evaluates if passed value is function\n * @param {Function|*} func\n * @param {Array} args\n * @param {Object=null} context\n * @static\n * @public\n */\n_.call = function (func, args, context) {\n  if (arguments.length < 3) {\n    context = null;\n    if (arguments.length < 2) {\n      args = [];\n    }\n  }\n  _.isFunction(func) && func.apply(context, args);\n};\n/**\n * Extend Object\n * @return {Object}\n * @static\n * @public\n */\n_.extend = function () {\n  var argsLength = arguments.length;\n  if (!argsLength) {\n    return {};\n  }\n  var collection1 = argsLength ? arguments[0] : {};\n  var collection2 = argsLength < 2 ? {} : arguments[1];\n  var newObject = {};\n  if (argsLength > 2) {\n    for (var index = 0; index <= argsLength; index += 1) {\n      newObject = _.extend(newObject, arguments[index]);\n    }\n    return newObject;\n  }\n  for (var property in collection1) {\n    if (collection1.hasOwnProperty(property)) {\n      newObject[property] = collection1[property];\n    }\n  }\n  for (property in collection2) {\n    if (collection2.hasOwnProperty(property)) {\n      newObject[property] = collection2[property];\n    }\n  }\n  return newObject;\n};\n/**\n * Determines whether an array includes a certain element, returning true or false as appropriate\n * @param {Array} collection\n * @param {*} value\n * @return {boolean}\n * @static\n * @public\n */\n_.includes = function (collection, value) {\n  if (_.isArray(collection)) {\n    return Array['includes'] ? collection['includes'](value) : collection.indexOf(value) > -1;\n  }\n  if (_.isObject(collection)) {\n    for (var prop in collection) {\n      if (collection.hasOwnProperty(prop)) {\n        if (collection[prop] === value) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n/**\n * Method returns true if an object is an array\n * @param {*} list\n * @return {boolean}\n * @static\n * @public\n */\n_.isArray = function (list) {\n  if (Array.isArray) {\n    return Array.isArray(list);\n  } else {\n    return Object.prototype.toString.call(list) === '[object Array]';\n  }\n};\n/**\n * Checks if `value` is function.\n * @param {*} variable\n * @return {boolean}\n * @static\n * @public\n */\n_.isFunction = function (variable) {\n  return typeof variable === 'function';\n};\n/**\n * Checks if `value` is object-like.\n * @param {*} variable\n * @return {boolean}\n * @static\n * @public\n */\n_.isObject = function (variable) {\n  return _.varType(variable) === 'object';\n};\n/**\n * Checks if `value` is string.\n * @param {*} variable\n * @return {boolean}\n * @static\n * @public\n */\n_.isString = function (variable) {\n  return typeof variable === 'string';\n};\n/**\n * Iterates over a collection of elements, yielding each in turn to an iteratee function\n * @param {Array|Object} collection\n * @param {Function} iteratee\n * @param {Object=} context\n * @param {Boolean=} returnContext\n * @return {Array|Object}\n * @static\n * @public\n */\n_.forEach = function (collection, iteratee, context, returnContext) {\n  if (!_.isObject(collection) && !_.isArray(collection)) {\n    return returnContext ? context : collection;\n  }\n  var index = 0, length;\n  if (collection.length === +collection.length) {\n    for (index, length = collection.length; index < length; index += 1) {\n      iteratee.call(context, collection[index], index, collection);\n    }\n  } else {\n    var keys = _.keys(collection);\n    for (index, length = keys.length; index < length; index += 1) {\n      iteratee.call(context, collection[keys[index]], keys[index], collection);\n    }\n  }\n  return returnContext ? context : collection;\n};\n/**\n * Get property from object\n * @param {*} object\n * @param {Array|String} propertyName\n * @param {*=null} onFailure\n * @return {*}\n * @static\n * @public\n */\n_.getInPath = function (object, propertyName, onFailure) {\n  arguments.length < 3 && (onFailure = null);\n  if (!_.isObject(object)) {\n    return onFailure;\n  }\n  if (_.isString(propertyName)) {\n    if (_.has(object, propertyName)) {\n      return object[propertyName];\n    } else {\n      return onFailure;\n    }\n  }\n  if (_.varType(propertyName) !== 'array') {\n    return onFailure;\n  }\n  var index = 0;\n  var length = propertyName.length;\n  for (index; index < length; index += 1) {\n    var part = propertyName[index];\n    if (!_.has(object, part)) {\n      return onFailure;\n    }\n    object = object[part];\n  }\n  return object;\n};\n/**\n * Determining if a javascript object has a given property\n * @param {*} object\n * @param {String} propertyName\n * @static\n * @public\n */\n_.has = function (object, propertyName) {\n  return _.varType(object) === 'object' && propertyName in object;\n};\n/**\n * Determining if a javascript object has a given property\n * @param {*} object\n * @param {String} propertyName\n * @param {String} propertyType\n * @return {boolean}\n * @static\n * @public\n */\n_.hasType = function (object, propertyName, propertyType) {\n  if (!_.has(object, propertyName)) {\n    return false;\n  }\n  return _.varTypeIn(object[propertyName], propertyType);\n};\n/**\n * Creates an array of the own enumerable property names of object\n * @param {Object} collection\n * @return {Array}\n * @static\n * @public\n */\n_.keys = function (collection) {\n  return Object.keys(collection).sort();\n};\n/**\n * Creates an array of values by running each element in collection through iteratee\n * @param {Function} iteratee\n * @param {Function} iteratee\n * @param {Array|Object} collection\n * @param {Object} context\n * @return {Array}\n * @static\n * @public\n */\n_.map = function (iteratee, collection, context) {\n  var result = [];\n  _.forEach(collection, function () {\n    result.push(iteratee.apply(context, arguments));\n  });\n  return result;\n};\n/**\n * Return 32-bit integer that specifies the number of elements in list\n * @param {*} list\n * @returns {boolean|number}\n * @static\n * @public\n */\n_.size = function (list) {\n  var listType = _.varType(list);\n  if (listType === 'array') {\n    return list.filter(function (value) {\n      return value !== undefined;\n    }).length;\n  } else if (listType === 'object') {\n    return Object.keys(list).length;\n  }\n  return false;\n};\n/**\n * Invokes the given iteratee function <times>.\n * Each invocation of iteratee is called with an index argument. Produces an array of the returned values.\n * @param {number} times\n * @param {Function} iterator\n * @returns {Array}\n * @static\n * @public\n */\n_.times = function (times, iterator) {\n  var accum = new Array(Math.max(0, times));\n  for (var index = 0; index < times; index += 1) {\n    accum[index] = iterator.call();\n  }\n  return accum;\n};\n/**\n * Retrieve all the elements contained in the collection, as an array\n * @param {Array|Object} collection\n * @param {number=0} startIndex\n * @return {Array}\n * @static\n * @public\n */\n_.toArray = function (collection, startIndex) {\n  var result = [];\n  var index = arguments.length >> 1 ? startIndex : 0;\n  var length = collection.length;\n  for (index; index < length; index += 1) {\n    result.push(collection[index]);\n  }\n  return result;\n};\n/**\n * Parses any value and returns a number\n * @param {*} value\n * @param {number=0} onFailedConversion\n * @param {number=0} minValue\n * @param {number=} maxValue\n * @static\n * @public\n */\n_.toNumber = function (value, onFailedConversion, minValue, maxValue) {\n  value = parseFloat(value);\n  if (!isFinite(value) || isNaN(value)) {\n    return onFailedConversion;\n  }\n  value = parseFloat(value.toFixed(0));\n  if (arguments.length < 4) {\n    maxValue = _.MAX_NUMBER;\n    if (arguments.length < 3) {\n      minValue = 0;\n      if (arguments.length < 2) {\n        onFailedConversion = 0;\n      }\n    }\n  }\n  if (!isFinite(value)) {\n    return onFailedConversion;\n  }\n  if (value > maxValue) {\n    return maxValue;\n  }\n  if (value < minValue) {\n    return minValue;\n  }\n  return value;\n};\n/**\n * Filter variable\n * @param {*} value\n * @param {Array|String|null} allowedTypes\n * @param {Object|String|null} filter\n * @param {*=null} defaltValue\n * @return {*}\n * @static\n * @public\n */\n_.varFilter = function (value, allowedTypes, filter, defaltValue) {\n  if (arguments.length < 4) {\n    defaltValue = null;\n    if (arguments.length < 3) {\n      filter = {};\n      if (arguments.length < 2) {\n        allowedTypes = [];\n      }\n    }\n  }\n  if (_.isArray(allowedTypes) && allowedTypes.length) {\n    if (!_.varTypeIn(value, allowedTypes)) {\n      return defaltValue;\n    }\n  } else if (_.isString(allowedTypes)) {\n    if (!_.varTypeIn(value, [allowedTypes])) {\n      return defaltValue;\n    }\n  }\n  if ((_.isObject(filter) && _.size(filter)) || _.isString(filter)) {\n    switch (_.isString(filter) ? filter : filter['type']) {\n      case 'boolean':\n        return !!value;\n      case 'number':\n      case 'integer':\n      case 'float':\n        if (_.isObject(filter)) {\n          return _.toNumber(value, defaltValue,\n            _.getInPath(filter, 'min', 0),\n            _.getInPath(filter, 'max', _.MAX_NUMBER)\n          );\n        }\n        return _.toNumber(value, defaltValue);\n      default:\n        return defaltValue;\n    }\n  }\n  return value;\n};\n/**\n * Get variable type\n * @param {*} variable\n * @return {string}\n * @static\n * @public\n */\n_.varType = function (variable) {\n  return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();\n};\n/**\n * Variable type allowance\n * @param {*} variable\n * @param {Array|String} types\n * @return {boolean}\n * @static\n * @public\n */\n_.varTypeIn = function (variable, types) {\n  if (_.varType(types) === 'array') {\n    return !!~types.indexOf(_.varType(variable));\n  } else {\n    return _.varType(variable) === (types + '');\n  }\n};\n\n/**\n * Image cache\n * @class ImageCache\n */\nfunction ImageCache() {\n}\nImageCache.prototype = new CacheLRU;\n/**\n * Add image to list, put it into cache\n * @param {Array|HTMLImageElement|{element: HTMLImageElement, timestamp: number|undefined}|String} image\n * @public\n */\nImageCache.prototype.add = function (image) {\n  if (image instanceof HTMLImageElement) {\n    image = {element: image};\n  }\n  if (_.isString(image)) {\n    var img = new Image;\n    img.setAttribute('src', image);\n    image = {\n      element: img\n    };\n  }\n  image.timestamp = image.timestamp || Date.now();\n  this.put(image.element.src, image);\n  return image;\n};\n\n/**\n * Image helper\n * @class ImageHelper\n */\nfunction ImageHelper() {\n}\n/**\n * Checks wherewe image is cached\n * @param {String} src\n * @returns {boolean}\n * @static\n * @public\n */\nImageHelper.isCached = function (src) {\n  var image = document.createElement('img');\n  image.src = src;\n  return image.complete || image.width + image.height > 0;\n};\n/**\n * Is Url\n * @param value\n * @return {boolean}\n * @static\n * @public\n */\nImageHelper.isURL = function (value) {\n  if (!value.length || value.length < 5) {\n    return false;\n  }\n  var start = value.substr(0, 4);\n  return start === 'http' || start === 'ftp:' || start === 'sftp' || start.substr(0, 2) === '//';\n};\n/**\n * Get image file size by URL\n * @param {String} src\n * @param {Function=} callback - size in bytes\n * @static\n * @public\n */\nImageHelper.fileSize = function (src, callback) {\n  var xhr = new XMLHttpRequest();\n  xhr.open('HEAD', src, true);\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4) {\n      if (xhr.status === 200) {\n        callback(xhr.getResponseHeader('Content-Length'));\n      } else {\n        callback(0);\n      }\n    }\n  };\n  xhr.send(null);\n};\n/**\n * Determines wherewe HTMLElement attached to DOM\n * @param element\n * @return {boolean}\n * @static\n * @public\n */\nImageHelper.isInDOM = function (element) {\n  if (element === document) {\n    return true;\n  }\n  element = element.parentNode;\n  if (element) {\n    return ImageHelper.isInDOM(element);\n  }\n  return false;\n};\n\n/**\n * Load image in iframe allowing to cancel loading request\n * @class ImageCancellableLoader\n * @example\n * var icl = new ImageCancellableLoader();\n * icl.load('//image.png', function (image) {\n *     console.log('Success');\n * }, function (image) {\n *     console.warn('Image load failed');\n * });\n * // remove unnecessary iframes from document body\n * icl.destructor();\n * @constructor\n */\nfunction ImageCancellableLoader() {\n  var scope = this;\n  /**\n   * IFRAME element for image loading\n   * @type {HTMLIFrameElement}\n   * @public\n   */\n  scope.iframe = null;\n  /**\n   * IMAGE element inside IFRAME\n   * @type {HTMLImageElement}\n   * @public\n   */\n  scope.image = null;\n  /**\n   * Is currently loading\n   * @type {boolean}\n   * @public\n   */\n  scope.isLoading = false;\n  /**\n   * Source URL of image\n   * @type {String}\n   * @public\n   */\n  scope.source = null;\n  /**\n   * Destructor\n   * @public\n   */\n  scope.destructor = function () {\n    scope.cancelRequest();\n    scope.isLoading = false;\n    scope.source = null;\n    scope.image = null;\n    document.body.removeChild(scope.iframe);\n    scope.iframe = null;\n  };\n  /**\n   * Initialize IFrame needed for image loading\n   * @private\n   */\n  function _initIFrame() {\n    /** @type HTMLIFrameElement */\n    scope.iframe = document.createElement('iframe');\n    scope.iframe.setAttribute('src', '');\n    scope.iframe.style.setProperty('display', 'none', '');\n    scope.iframe.onload = function () {\n      scope.iframe.onload = null;\n      scope.image = document.createElement('img');\n      (scope.iframe.contentDocument || scope.iframe.contentWindow).body.appendChild(scope.image);\n      scope.image.onload = function () {\n        if (!scope.source || scope.image.src !== scope.source) {\n          return;\n        }\n        scope.isLoading = false;\n        scope.image.onload = null;\n        return scope.onLoad(scope.image);\n      }.bind(scope);\n      scope.image.onerror = function () {\n        scope.isLoading = false;\n        scope.image.onerror = null;\n        return scope.onFailure(scope.image);\n      }.bind(scope);\n    }.bind(scope);\n    document.body.appendChild(scope.iframe);\n  }\n\n  /**\n   * Cancel loading request\n   * @return {boolean}\n   * @public\n   */\n  scope.cancelRequest = function () {\n    var currentWindow;\n    if (scope.isLoading && scope.image) {\n      /** @type Window|Object */\n      currentWindow = scope.iframe.contentWindow;\n      if (currentWindow.stop) {\n        currentWindow.stop();\n      } else {\n        currentWindow = scope.iframe.contentDocument;\n        if (currentWindow.execCommand) {\n          currentWindow.execCommand('Stop', false);\n        }\n      }\n    }\n    return scope.isLoading = false;\n  };\n  /**\n   * Load image in browser cache\n   * @param {String} src\n   * @param {Function} onSuccess\n   * @param {Function} onError\n   * @public\n   */\n  scope.load = function (src, onSuccess, onError) {\n    if (!scope.iframe) {\n      _initIFrame();\n    }\n    var tempImage;\n    if (!scope.image) {\n      tempImage = new Image();\n      tempImage.onload = function () {\n        return onSuccess(tempImage);\n      };\n      tempImage.onerror = function () {\n        return onError(tempImage);\n      };\n      tempImage.src = src;\n      return;\n    }\n    scope.source = src;\n    /**\n     * @type {Function}\n     * @public\n     */\n    scope.onLoad = onSuccess;\n    /**\n     * @type {Function}\n     * @public\n     */\n    scope.onFailure = onError;\n    if (scope.image.src === src) {\n      if (scope.image.complete) {\n        scope.cancelRequest();\n        onSuccess(scope.image);\n      }\n      return;\n    }\n    scope.cancelRequest();\n    scope.isLoading = true;\n    return scope.image.src = src;\n  }\n}\n\n/**\n * Image loading\n * @class ImageLoader\n * @param {Object} options\n * @param {Object} defaults\n * @constructor\n */\nfunction ImageLoader(options, defaults) {\n  var scope = this;\n  /**\n   * Unique ID\n   * @type {number}\n   */\n  scope.id;\n  /**\n   * Src attribute\n   * @type {String}\n   */\n  scope.src;\n  /**\n   * Allow cancel of image loading\n   * @type {boolean}\n   */\n  scope.fullRepeal = false;\n  /**\n   * Is currently paused\n   * @type {boolean}\n   */\n  scope.isPaused = false;\n  /**\n   * Callback in case of successful image loading\n   * @type {Function}\n   */\n  scope.onSuccess = null;\n  /**\n   * Callback in case of error\n   * @type {Function}\n   */\n  scope.onError = null;\n  /**\n   * Callback on all opertions is over\n   * @type {Function}\n   */\n  scope.onResolve = null;\n  /**\n   * Maximum redowloads of image\n   * @type {number}\n   */\n  scope.maxDownloads = 1;\n  /**\n   * Redownload counter\n   * @type {number}\n   */\n  scope.currentDownloads = 0;\n  /**\n   * HTML Image element\n   * @type {Object}\n   */\n  scope.image;\n  /**\n   * Is image loading completed\n   * @type {boolean}\n   */\n  scope.completed = false;\n  /**\n   * Is image loading was started\n   * @type {boolean}\n   */\n  scope.isLoadingStarted = false;\n  /**\n   * Constructor\n   * @param {Object} options\n   * @param {Object} defaults\n   * @public\n   */\n  function _initialize(options, defaults) {\n    scope.id = _.getInPath(options, 'id', 0);\n    if (scope.id === 0) {\n      _cfgDebug && console.warn('ImageLoader->constructor() - ID is empty');\n    }\n    scope.src = _.getInPath(options, 'src', '');\n    if (!scope.src || scope.src.length < 5) {\n      _cfgDebug && console.warn('ImageLoader->constructor() - SRC is empty');\n    }\n    scope.fullRepeal = _.getInPath(options, 'fullRepeal', defaults.fullRepeal);\n    scope.onSuccess = _.getInPath(options, 'onSuccess', defaults.onSuccess);\n    scope.onError = _.getInPath(options, 'onError', defaults.onError);\n    scope.onResolve = _.getInPath(options, 'onResolve', defaults.onResolve);\n    scope.maxDownloads = _.toNumber(\n      _.getInPath(options, 'maxDownloads', defaults.maxDownloads),\n      defaults.maxDownloads,\n      1\n    );\n    scope.isPaused = _.getInPath(options, 'isPaused', defaults.isPaused);\n  }\n\n  _initialize(options, defaults);\n  /**\n   * Dispatch image loading\n   * @return {boolean}\n   * @public\n   */\n  scope.dispatchLoading = function () {\n    if (scope.isPaused) {\n      return false;\n    }\n    scope.isLoadingStarted = true;\n    if (ImageHelper.isCached(scope.src)) {\n      _cfgDebug && console.info('ImageLoader->dispatchLoading() - Image is already in cache: ' + scope.src);\n      scope.onLoad();\n      return true;\n    }\n    scope.initImage();\n    return true;\n  };\n  /**\n   * Initialize image\n   * @public\n   */\n  scope.initImage = function () {\n    if (!scope.fullRepeal) {\n      scope.image = new Image();\n      scope.image.src = scope.src;\n      scope.image.onload = scope.onLoad.bind(scope);\n      scope.image.onerror = scope.onFailed.bind(scope);\n    } else {\n      scope.image.src = scope.src;\n      scope.image = new ImageCancellableLoader();\n      scope.image.load(scope.src, scope.onLoad.bind(scope), scope.onFailed.bind(scope));\n    }\n  };\n  /**\n   * Return basic information about image\n   * @return {Object}\n   * @public\n   */\n  scope.getImageinfo = function () {\n    return {\n      id: scope.id,\n      src: scope.src,\n      completed: scope.completed\n    };\n  };\n  /**\n   * Called when image loaded\n   * @public\n   */\n  scope.onLoad = function () {\n    scope.completed = true;\n    scope.image = null;\n    _cfgDebug && console.info('ImageLoader->onLoad() - Image is loaded: ' + scope.src);\n    _cfgDebug && console.dir(scope);\n    _.call(scope.onSuccess, [scope.getImageinfo()]);\n    _.call(scope.onComplete, [scope]);\n  };\n  /**\n   * Called when image load failed\n   * @public\n   */\n  scope.onFailed = function () {\n    scope.completed = false;\n    scope.currentDownloads += 1;\n    if (scope.currentDownloads >= scope.maxDownloads) {\n      _cfgDebug && console.info('ImageLoader->onFailed() - Image is not loaded' +\n        (scope.maxDownloads > 1 ? '. Attempts were made: ' + scope.currentDownloads : ''));\n      _cfgDebug && console.dir(scope);\n      _.call(scope.onError, [scope.getImageinfo()]);\n      _.call(scope.onComplete, [scope]);\n    } else {\n      _cfgDebug && console.info('ImageLoader->onFailed() - ' +\n        'Image is not loaded. Attempt ' + scope.currentDownloads + '/' + scope.maxDownloads);\n      _cfgDebug && console.dir(scope);\n      scope.initImage();\n    }\n  };\n  /**\n   * Called when image loading completed\n   * @public\n   */\n  scope.onComplete = function () {\n    _cfgDebug && console.warn('ImageLoader->onComplete() - Warning! This is dummy function!');\n    _cfgDebug && console.dir(scope);\n    _.call(scope.onResolve, [scope.getImageinfo()]);\n  };\n  /**\n   * Called when image loading quits\n   * @public\n   */\n  scope.onDrop = function () {\n    _cfgDebug && console.info('ImageLoader->onDrop() - Image loading completed');\n    _cfgDebug && console.dir(scope);\n    if (scope.fullRepeal) {\n      scope.image.destructor();\n    }\n  }\n}\n\n/**\n * Print log\n * @type {boolean}\n * @private\n */\nvar _cfgDebug = false;\n/**\n * Image manager\n * @param {boolean} waitForDocumentLoad\n * @param {number=} cache\n * @constructor\n * @class ImageManager\n */\nfunction ImageManager(waitForDocumentLoad, cache) {\n  var scope = this;\n  if (arguments.length < 2) {\n    cache = 50;\n    if (arguments.length) {\n      waitForDocumentLoad = true;\n    } else {\n      waitForDocumentLoad = !!waitForDocumentLoad;\n    }\n  } else {\n    cache = _.toNumber(cache, 50, 2, _.MAX_NUMBER);\n  }\n  /**\n   * Loading images\n   * @type {Object}\n   * @private\n   */\n  var _listOfImages = {};\n  /**\n   * Image list size limit\n   * @type {number}\n   * @private\n   */\n  var _listSize = _.MAX_NUMBER;\n  /**\n   * Maximum current active load requests\n   * @type {number}\n   * @private\n   */\n  var _maxActiveDerived = 1;\n  /**\n   * Currently active downloads\n   * @type {number}\n   * @private\n   */\n  var _currentActiveDerived = 0;\n  /**\n   * Key value pair of images source and ID\n   * @type {{src: number}}\n   * @private\n   */\n  var _srcList = {};\n  /**\n   * Autoincrement ID for image list\n   * @type {number}\n   * @private\n   */\n  var _id = 0;\n  /**\n   * Callback called when everything is done\n   * @type {Function|null}\n   */\n  scope.onFinish = null;\n  /**\n   * Is downloads currently active\n   * @type {boolean}\n   * @private\n   */\n  var _isActive = false;\n  /**\n   * Default configuration for loading of images\n   * @type {Object}\n   * @private\n   */\n  var _configDefault = {\n    fullRepeal: false,\n    isPaused: false,\n    maxDownloads: 1,\n    onError: null,\n    onResolve: null,\n    onSuccess: null\n  };\n  /**\n   * Current configuration for loading images\n   * @type {Object}\n   * @private\n   */\n  var _config = {};\n  /**\n   * Object holding HTMLImageElement to prevent cache cleaning\n   * @type {ImageCache}\n   * @private\n   */\n  var _cache;\n  /**\n   * Gets the settings for downloading images\n   * @return {Object}\n   * @public\n   */\n  scope.configGet = function () {\n    return _.extend(_config, {});\n  };\n  /**\n   * Resets the configuration\n   * @public\n   */\n  scope.configReset = function () {\n    _config = _.extend(_configDefault, {});\n  };\n  /**\n   * Constructor\n   * @param {boolean=} waitForDocumentLoad\n   * @param {number=} cache\n   * @public\n   */\n  function _initialize(waitForDocumentLoad, cache) {\n    scope.configReset();\n    _cache = new ImageCache(cache);\n    if (waitForDocumentLoad) {\n      if (document.readyState === 'interactive' || document.readyState === 'complete') {\n        _cfgDebug && console.info('ImageManager->constructor() - Document is\\'t ready');\n        _isActive = true;\n        _checkOut();\n      } else {\n        document.addEventListener('DOMContentLoaded', function () {\n          _cfgDebug && console.info('ImageManager->constructor() - Document ready');\n          _isActive = true;\n          _checkOut();\n        }.bind(scope), false);\n      }\n    } else {\n      _cfgDebug && console.info('ImageManager->constructor() - Do not wait for document loading');\n      _isActive = true;\n      _checkOut();\n    }\n  }\n\n  _initialize(waitForDocumentLoad, cache);\n  Object.defineProperty(scope, 'activeDerived', {\n    /**\n     * Get current download limit\n     * @return {number}\n     * @public\n     */\n    get: function () {\n      return _maxActiveDerived;\n    },\n    /**\n     * Set current active downlod limit\n     * @param {number=1} newActiveSize\n     * @public\n     */\n    set: function (newActiveSize) {\n      var cleanSize = _.toNumber(newActiveSize, 1, 1);\n      if (cleanSize === _maxActiveDerived) {\n        _cfgDebug && console.info(\n          'ImageManager->activeDerived() - The number of active downloads hasn\\'t changed: ' + cleanSize);\n        return;\n      }\n      _cfgDebug && console.info(\n        'ImageManager->activeDerived() - ' +\n        'The number of active downloads changed from ' + _maxActiveDerived + ' to ' + cleanSize);\n      _maxActiveDerived = cleanSize;\n      _onDownloadSizeChange(cleanSize);\n    }\n  });\n  Object.defineProperty(scope, 'listSize', {\n    /**\n     * Returns the size of the image list\n     * @return {number}\n     * @public\n     */\n    get: function () {\n      return _listSize;\n    },\n    /**\n     * Set image size list\n     * @param {number=1} newSize\n     * @public\n     */\n    set: function (newSize) {\n      var cleanSize = _.toNumber(newSize, 1, 1);\n      var currentSize = _listSize;\n      if (cleanSize === currentSize) {\n        _cfgDebug && console.info('ImageManager->listSize - The size of the list is\\'t changed: ' + currentSize);\n        return;\n      }\n      _cfgDebug && console.info(\n        'ImageManager->listSize - The size of the list has changed from ' + currentSize + ' to ' + cleanSize);\n      _listSize = cleanSize;\n      _onListSizeChange(currentSize);\n    }\n  });\n  Object.defineProperty(scope, 'imageListCurrSize', {\n    /**\n     * Return current size of image list\n     * @return {number}\n     * @public\n     */\n    get: function () {\n      return _.size(_listOfImages);\n    },\n    /**\n     * Dummy setter for image list size\n     * @param {*} value\n     * @public\n     */\n    set: function (value) {\n    }\n  });\n  Object.defineProperty(scope, 'debug', {\n    /**\n     * Returns the state of the debug mode\n     * @return {boolean}\n     * @public\n     */\n    get: function () {\n      return _cfgDebug;\n    },\n    /**\n     * Sets a flag to display debug logs\n     * @param {boolean=false} toDebug\n     * @public\n     */\n    set: function (toDebug) {\n      _cfgDebug = !!toDebug;\n    }\n  });\n  Object.defineProperty(scope, 'srcList', {\n    /**\n     * Image URL list\n     * @return {Array}\n     * @public\n     */\n    get: function () {\n      return _.keys(_srcList).map(function (src) {\n        return src;\n      });\n    },\n    /**\n     * Dummy image URL list setter\n     * @param {*} value\n     * @public\n     */\n    set: function (value) {\n    }\n  });\n  Object.defineProperty(scope, 'cacheLimit', {\n    /**\n     * Return current cache limit\n     * @return {number}\n     */\n    get: function () {\n      return _cache.limit;\n    },\n    /**\n     * Set image cache limit. At least two.\n     * @param {number} limit\n     */\n    set: function (limit) {\n      _cache.limit = limit;\n    }\n  });\n  /**\n   * Start downloading images\n   * @private\n   */\n  function _checkOut() {\n    if (!_isActive) {\n      _cfgDebug && console.info('ImageManager->_checkOut() - The loader is not active');\n      return;\n    }\n    if (!scope.imageListCurrSize) {\n      _cfgDebug && console.info('ImageManager->_checkOut() - Image list is empty');\n      if (_id) {\n        _cfgDebug && console.info(\n          'ImageManager->_checkOut() - All operations are carried out, get out of the handler');\n        _onAllDone();\n      } else {\n        _cfgDebug && console.info('ImageManager->_checkOut() - Emty ID means there was not any operations');\n      }\n      return;\n    }\n    if (_currentActiveDerived >= _maxActiveDerived) {\n      _cfgDebug && console.info(\n        'ImageManager->_checkOut() - ' +\n        'Now all downloads are active: ' + _currentActiveDerived + ' of ' + _maxActiveDerived);\n      return;\n    }\n    _cfgDebug && console.info('ImageManager->_checkOut() - Begin to look through the list');\n    _cfgDebug && console.dir(_.keys(_listOfImages));\n    _.keys(_listOfImages).every(function (imageId) {\n      if (_currentActiveDerived >= _maxActiveDerived) {\n        _cfgDebug && console.info(\n          'ImageManager->_checkOut() - ' +\n          'Skip. All downloads are active: ' + _currentActiveDerived + ' of ' + _maxActiveDerived);\n        return false;\n      }\n      if (_listOfImages[imageId].isPaused) {\n        _cfgDebug && console.info(\n          'ImageManager->_checkOut() - The image in the pause: ' + _listOfImages[imageId].src);\n        _cfgDebug && console.dir(_listOfImages[imageId]);\n      } else {\n        if (!_listOfImages[imageId].isLoadingStarted) {\n          _currentActiveDerived += 1;\n          _listOfImages[imageId].dispatchLoading();\n          _cfgDebug && console.info(\n            'ImageManager->_checkOut() - Image load started: ' + _listOfImages[imageId].src);\n          _cfgDebug && console.dir(_listOfImages[imageId]);\n        } else {\n          _cfgDebug && console.info(\n            'ImageManager->_checkOut() - Image load already started: ' + _listOfImages[imageId].src);\n          _cfgDebug && console.dir(_listOfImages[imageId]);\n        }\n      }\n      return true;\n    }.bind(scope));\n  }\n\n  /**\n   * Event called when all done\n   * @private\n   */\n  function _onAllDone() {\n    _cfgDebug && console.info('ImageManager->_onAllDone() - All actions are completed');\n    _.call(scope.onFinish, [], scope);\n  }\n\n  /**\n   * Function should be called when resizing list\n   * @param {number} oldListSize\n   * @private\n   */\n  function _onListSizeChange(oldListSize) {\n    _cfgDebug && console.info('ImageManager->_onListSizeChange(' + oldListSize + ')');\n    if (scope.listSize >= oldListSize) {\n      return;\n    }\n    if (!scope.imageListCurrSize) {\n      return;\n    }\n    var newSize = scope.listSize;\n    var currSize = scope.imageListCurrSize;\n    if (newSize > currSize) {\n      return;\n    }\n    _.keys(_listOfImages).splice(0, currSize - newSize).forEach(function (id) {\n      _listOfImages[id].onComplete(_listOfImages[id]);\n    });\n  }\n\n  /**\n   * Get first image in list\n   * @return {boolean|Object}\n   * @private\n   */\n  function _imageGetFirst() {\n    if (!scope.imageListCurrSize) {\n      return false;\n    }\n    return _listOfImages[_.keys(_listOfImages)[0]];\n  }\n\n  /**\n   * Event fired when change active downloads limit\n   * @param {number} newActiveDownloadsSize\n   * @private\n   */\n  function _onDownloadSizeChange(newActiveDownloadsSize) {\n    _cfgDebug && console.info('ImageManager->_onDownloadSizeChange(' + newActiveDownloadsSize + ')');\n  }\n\n  /**\n   * Is URL in the image list\n   * @param {String} srcUrl\n   * @return {boolean}\n   * @public\n   */\n  scope.hasSource = function (srcUrl) {\n    return srcUrl in _srcList;\n  };\n  /**\n   * Is scope ID exists\n   * @param {number|String} id\n   * @return {boolean}\n   * @public\n   */\n  function _hasId(id) {\n    return id in _listOfImages;\n  }\n\n  /**\n   * Adds an object to the image list\n   * @param {String} srcUrl\n   * @param {Object=} options\n   * @return {boolean|number}\n   * @public\n   */\n  scope.loadImage = function (srcUrl, options) {\n    if (!_.isString(srcUrl) || srcUrl.length < 5) {\n      _cfgDebug && console.info('ImageManager->loadImage() - Wrong SRC: ' + srcUrl);\n      _.call(options.onError, [{\n        id: -1,\n        src: srcUrl,\n        completed: false\n      }]);\n      return false;\n    }\n    if (scope.hasSource(srcUrl)) {\n      _cfgDebug && console.info('ImageManager->loadImage() - SRC already exists: ' + srcUrl);\n      _.call(options.onResolve, [{\n        id: -1,\n        src: srcUrl,\n        completed: true\n      }]);\n      return false;\n    }\n    var currListSize = scope.imageListCurrSize;\n    if ((currListSize > 0) && (currListSize + 1 > scope.listSize)) {\n      var imageLoader = _imageGetFirst();\n      imageLoader.onComplete(imageLoader);\n    }\n    _id += 1;\n    options = _.extend(_config, _.isObject(options) ? options : {});\n    options.src = srcUrl;\n    options.id = _id;\n    _srcList[srcUrl] = _id;\n    var img = new ImageLoader(options, scope.configGet());\n    img.onComplete = function (imageLoader) {\n      if (!imageLoader.isPaused) {\n        _currentActiveDerived -= 1;\n      }\n      imageLoader.onDrop();\n      _removeImageFromList(imageLoader.src, imageLoader);\n    }.bind(scope);\n    _listOfImages[_id] = img;\n    _checkOut();\n    return _id;\n  };\n  /**\n   * Remove image from list\n   * @param srcUrl\n   * @param imageLoader\n   * @private\n   */\n  function _removeImageFromList(srcUrl, imageLoader) {\n    _cfgDebug && console.info('ImageManager->_removeImageFromList() - Remove by src: ' + srcUrl);\n    _cfgDebug && console.dir(imageLoader);\n    var id = _srcList[srcUrl];\n    delete _listOfImages[id];\n    delete _srcList[srcUrl];\n    _checkOut();\n  }\n\n  /**\n   * Set configuration parameter\n   * @param {Object|String} configName\n   * @param {*} configValue\n   * @public\n   */\n  scope.configSet = function (configName, configValue) {\n    if (_.isObject(configName)) {\n      return _.forEach(configName, function (value, name) {\n        return scope.configSet(name, value);\n      });\n    }\n    if (!_.isString(configName)) {\n      _cfgDebug && console.warn('ImageManager->configSet() - Parameter must be string [' + configName + ']');\n      return;\n    }\n    var setable = {\n      fullRepeal: function (value) {\n        return _.varFilter(value, 'boolean', 0, false);\n      },\n      maxDownloads: function (value) {\n        return _.varFilter(value, 'number', {type: 'number', min: 1}, 1);\n      },\n      onError: function (value) {\n        return _.isFunction(value) ? value : null;\n      },\n      onResolve: function (value) {\n        return _.isFunction(value) ? value : null;\n      },\n      onSuccess: function (value) {\n        return _.isFunction(value) ? value : null;\n      }\n    };\n    if (!_.includes(_.keys(setable), configName)) {\n      _cfgDebug && console.warn('ImageManager->configSet() - There is no such parameter [' + configName + ']');\n      return;\n    }\n    _config[configName] = setable[configName](configValue);\n  };\n  /**\n   * Put image in download state\n   * @param {Array|number|String} id\n   * @return {Array|boolean|Object}\n   * @public\n   */\n  function _startById(id) {\n    if (_.isArray(id)) {\n      return _.forEach(id, function (value) {\n        return _startById(value);\n      });\n    }\n    if (!_hasId(id)) {\n      _cfgDebug && console.info('ImageManager->_startById() - ID is not exists');\n      return false;\n    }\n    _listOfImages[id].isPaused = false;\n    _checkOut();\n    return true;\n  }\n\n  /**\n   * Prevent image from being downloaded\n   * @param {String} srcUrl\n   * @return {Array|boolean}\n   * @public\n   */\n  scope.pauseBySrc = function (srcUrl) {\n    if (_.isArray(srcUrl)) {\n      return _.forEach(srcUrl, function (value) {\n        return scope.pauseBySrc(value);\n      });\n    }\n    if (!scope.hasSource(srcUrl)) {\n      _cfgDebug && console.info('ImageManager - > pauseBySrc() - SRC is not added: ' + srcUrl);\n      return false;\n    }\n    var id = _srcList[srcUrl];\n    _listOfImages[id].isPaused = true;\n    return true;\n  };\n  /**\n   * Put image in download state\n   * @param {String} srcUrl\n   * @return {Array|boolean}\n   * @public\n   */\n  scope.startBySrc = function (srcUrl) {\n    if (_.isArray(srcUrl)) {\n      return _.forEach(srcUrl, function (value) {\n        return scope.startBySrc(value);\n      });\n    }\n    if (!scope.hasSource(srcUrl)) {\n      _cfgDebug && console.info('ImageManager->startBySrc() - SRC is not added: ' + srcUrl);\n      return false;\n    }\n    var id = _srcList[srcUrl];\n    _listOfImages[id].isPaused = false;\n    _checkOut();\n    return true;\n  };\n  /**\n   * Prevent all not started downloads\n   * @public\n   */\n  scope.pauseAll = function () {\n    scope.pauseBySrc(_.keys(_listOfImages));\n  };\n  /**\n   * Start all not started downloads\n   * @public\n   */\n  scope.startAll = function () {\n    _startById(_.keys(_listOfImages));\n  };\n  /**\n   * Add image to list, put it into cache\n   * @param {HTMLImageElement|{element: HTMLImageElement}|String} image\n   * @returns {Object}\n   * @public\n   * @example\n   * scope.cacheAdd('http://to.some/image.img');\n   * scope.cacheAdd($('#myImage').get(0))\n   */\n  scope.cacheAdd = function (image) {\n    _cache.add(image);\n  };\n  /**\n   * Get information about cached image\n   * @param {String} src\n   * @return {boolean|Object}\n   * @public\n   */\n  scope.cacheGet = function (src) {\n    return _cache.get(src, false);\n  };\n  /**\n   * Remove image from cache\n   * @param {String} src\n   * @return {null|Object}\n   * @public\n   */\n  scope.cacheRemove = function (src) {\n    return _cache.remove(src);\n  };\n  /**\n   * List of image url's in cache\n   * @return {Array}\n   * @public\n   */\n  scope.cacheList = function () {\n    return _cache.keys();\n  };\n  /**\n   * Clear cache from all images\n   * @public\n   */\n  scope.cacheClear = function () {\n    _cache.destroy();\n  };\n  Object.defineProperty(scope, 'cacheSize', {\n    /**\n     * Get limit of cached images\n     * @return {number}\n     * @public\n     */\n    get: function () {\n      return _cache.limit;\n    },\n    /**\n     * Set limit of cached images\n     * @param {number} value\n     * @public\n     */\n    set: function (value) {\n      _cache.limit = value;\n    }\n  });\n}\n\n  return ImageManager;\n}));\n"],"sourceRoot":"/source/"}